{"version":3,"sources":["reso/foxplay.png","logo.svg","components/certificate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","certificate","jspdfGenerator","doc","jsPDF","text","save","className","style","overflow","class","Form","id","Row","form","FormGroup","marginLeft","Label","for","Input","type","name","placeholder","Button","onClick","this","color","src","image","width","marginTop","boxShadow","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,qC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,wMCsD5BC,E,4MA5CXC,eAAe,WACX,IAAIC,EAAI,IAAIC,IAAM,IAAI,MACtBD,EAAIE,KAAK,IAAI,IAAI,qBACjBF,EAAIE,KAAK,IAAI,IAAI,2BACjBF,EAAIG,KAAK,oB,uDAIT,OAEI,yBAAKC,UAAU,OACf,yBAAKC,MAAO,CAACC,SAAS,UACtB,yBAAKC,MAAM,cACX,2DAEF,kBAACC,EAAA,EAAD,CAAMC,GAAG,gBACT,kBAACC,EAAA,EAAD,CAAKC,MAAI,GAEP,kBAACC,EAAA,EAAD,CAAWP,MAAO,CAACQ,WAAW,SAC5B,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBAAX,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQT,GAAG,eAAeU,YAAY,gCAGvE,kBAACP,EAAA,EAAD,CAAWP,MAAO,CAACQ,WAAW,SAC9B,kBAACC,EAAA,EAAD,cACA,kBAACE,EAAA,EAAD,CAAOC,KAAK,SAASC,KAAK,SAAST,GAAG,eACtC,yDACA,8CACE,6DAOE,kBAACW,EAAA,EAAD,CAAQC,QAASC,KAAKvB,eAAgBwB,MAAM,WAA5C,YAAwE,KAGxE,yBAAKC,IAAKC,IAAQpB,MAAO,CAACqB,MAAM,QAASC,UAAU,KAAMC,UAAU,e,GAzCnDC,aCSXC,MAXf,WACE,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAErB,kBAAC,EAAD,SCEiB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.272f56c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foxplay.9d1665a8.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import '../App.css';\r\nimport React, { Component } from 'react';\r\nimport {Col,Row, Button, Form, FormGroup, Label, Input, FormText} from 'reactstrap';\r\nimport image from \"../reso/foxplay.png\"\r\nimport { jsPDF } from \"jspdf\";\r\n\r\n\r\nclass certificate extends Component {\r\n  \r\n\r\n    jspdfGenerator=()=>{\r\n        var doc=new jsPDF('p','pt');\r\n        doc.text(100,100,'Name of the Event');\r\n        doc.text(100,200,'Name of the participant');\r\n        doc.save(\"certificate.pdf\");\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"App\">\r\n            <div style={{overflow:\"false\"}}>\r\n            <div class=\"typewriter\">\r\n            <h1>Generate Your Certificate.</h1>\r\n          </div>\r\n          <Form id=\"exampleEmail\" >\r\n          <Row form>\r\n          \r\n            <FormGroup style={{marginLeft:\"10vw\"}}>\r\n              <Label for=\"exampleEmail\">Email</Label>\r\n              <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Enter the Registered Email\" />\r\n            </FormGroup>\r\n            \r\n      <FormGroup style={{marginLeft:\"10vw\"}}>\r\n      <Label >Event</Label>\r\n      <Input type=\"select\" name=\"select\" id=\"exampleDrop\">\r\n      <option>Name of the event ...</option>  \r\n      <option>GSW:GitHub</option>\r\n        <option>Hacktober Fest Meetup</option>\r\n      \r\n      </Input>\r\n    </FormGroup>\r\n   \r\n    </Row>\r\n      </Form>\r\n          <Button onClick={this.jspdfGenerator} color=\"success\">Generate</Button>{' '}\r\n          \r\n          </div>\r\n          <img src={image}  style={{width:\"300px\", marginTop:\"n3\", boxShadow:\"true\"}}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default certificate;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Certificate from \"./components/certificate\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n     \n   <Certificate/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}